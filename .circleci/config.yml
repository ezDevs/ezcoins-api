version: 2
jobs:
  build:
    docker:
      - image: circleci/elixir:1.9.4
        environment:
          MIX_ENV: test
    steps:
      - checkout
      - run: mix local.hex --force
      - run: mix local.rebar --force
      - restore_cache:
          key: v1-deps-cache-{{ checksum "mix.lock" }}
      - run: mix do deps.get, deps.compile
      - save_cache:
          key: v1-deps-cache-{{ checksum "mix.lock" }}
          paths:
            - deps
            - ~/.mix
            - _build
      - run: mix compile
      - run: echo "$OTP_VERSION $ELIXIR_VERSION" > .version_file
      - restore_cache:
          keys:
            - plt-cache-{{ checksum ".version_file" }}-{{ checksum "mix.lock" }}
      - run: mix dialyzer --plt
      - save_cache:
          key: plt-cache-{{ checksum ".version_file"  }}-{{ checksum "mix.lock" }}
          paths:
            - _build
            - deps
            - ~/.mix
  dialyzer:
    docker:
      - image: circleci/elixir:1.9.4
        environment:
          MIX_ENV: test
    steps:
      - checkout
      - run: echo "$OTP_VERSION $ELIXIR_VERSION" > .version_file
      - restore_cache:
          keys:
            - plt-cache-{{ checksum ".version_file" }}-{{ checksum "mix.lock" }}
      - run:
          name: Execute dialyzer
          command: mix dialyzer --halt-exit-status
  test:
    docker:
      - image: circleci/elixir:1.9.4
    steps:
      - checkout
      - restore_cache:
          key: v1-deps-cache-{{ checksum "mix.lock" }}
      - run: mix coveralls.html
      - store_artifacts:
          path: cover
          destination: coverage_results
  generate_documentation:
    docker:
      - image: circleci/elixir:1.9.4
        environment:
          MIX_ENV: test
    steps:
      - checkout
      - restore_cache:
          key: v1-deps-cache-{{ checksum "mix.lock" }}
      - run: mix docs
      - store_artifacts:
          path: doc
          destination: documentation
  format_check:
    docker:
      - image: circleci/elixir:1.9.4
        environment:
          MIX_ENV: test
    steps:
      - checkout
      - run: mix format --check-formatted
  credo:
    docker:
      - image: circleci/elixir:1.9.4
        environment:
          MIX_ENV: test
    steps:
      - checkout
      - run: echo "$OTP_VERSION $ELIXIR_VERSION" > .version_file
      - restore_cache:
          keys:
            - plt-cache-{{ checksum ".version_file" }}-{{ checksum "mix.lock" }}
      - run:
          name: Execute credo
          command: mix credo
  build_to_deploy:
    docker:
      - image: docker:17.05.0-ce-git
    working_directory: /ez-coins-api
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache py-pip=9.0.0-r1
            pip install docker-compose==1.15.0
      - run:
          name: Build application Docker image
          command: |
            docker build -t ez-coins-api .
      - deploy:
          name: Push application Docker image
          command: |
            docker login -e $DOCKERHUB_EMAIL -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASS
            docker tag ez-coins-api $DOCKERHUB_USERNAME/ez-coins-api:$CIRCLE_SHA1
            docker tag ez-coins-api $DOCKERHUB_USERNAME/ez-coins-api:latest
            docker push $DOCKERHUB_USERNAME/ez-coins-api:$CIRCLE_SHA1
            docker push $DOCKERHUB_USERNAME/ez-coins-api:latest
  setup:
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - run:
          name: Setup app
          command: |
            scp -o StrictHostKeyChecking=no -r ./docker-compose.yml ./.env.backup ezdevs@138.68.226.93:~/ezcoins/api/
            ssh -o StrictHostKeyChecking=no ezdevs@138.68.226.93 "cd ezcoins/api && mv .env.backup .env && docker pull maykonmichel/ez-coins-api"
  deploy:
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - run:
          name: Setup app
          command: |
            ssh -o StrictHostKeyChecking=no ezdevs@138.68.226.93 "cd ezcoins/api && export $(cat .env) && docker-compose -f docker-compose.yml up -d"

workflows:
  version: 2
  build-and-test:
    jobs:
      - build
      - format_check:
          requires:
            - build
      - generate_documentation:
          requires:
            - build
      - dialyzer:
          requires:
            - build
      - test:
          requires:
            - build
      - credo:
          requires:
            - build
  build-and-deploy:
    jobs:
      - build_to_deploy:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
      - setup:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
          requires:
            - build_to_deploy
      - deploy:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
          requires:
            - setup
